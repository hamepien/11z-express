{"version":3,"file":"method.deco.js","sourceRoot":"","sources":["../../../../src/deco/api/method.deco.ts"],"names":[],"mappings":"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","sourcesContent":["import { Store } from '../../service/store.se'\r\nimport { HttpMethods, MetadataKeys, ApiMethod, PathParams } from '../../utils/types'\r\n\r\n/**\r\n * A specific endpoint for HTTP requests factory.\r\n *\r\n * @param method http method type.\r\n * @param url url path.\r\n * @param status status code.\r\n * @returns\r\n */\r\nexport function METHOD_DECORATOR_FACTORY<M extends string>(method: M, url: PathParams = '/', status = 200): MethodDecorator {\r\n    return (Target, propertyKey, descriptor) => {\r\n        // Here we check does api method metadata exist or not?.\r\n        const apiMethodsMetadata: ApiMethod[] = Store.container.has(Target.constructor.prototype, MetadataKeys.__api_method__, propertyKey)\r\n            ? // If it does exist we will get it from there.\r\n              Store.container.getOwn<ApiMethod[]>(Target.constructor.prototype, MetadataKeys.__api_method__, propertyKey)\r\n            : // If it does not exist set it to an empty array.\r\n              []\r\n\r\n        // Push each object property into the head variable.\r\n        // Why do we need to do this?\r\n        // Because sometime a class does contain many methods.\r\n        apiMethodsMetadata.push({\r\n            url,\r\n            method: method as HttpMethods,\r\n            status,\r\n            descriptor,\r\n            propertyKey\r\n        })\r\n\r\n        // Define a new metadata object and set it up in the container Store.\r\n        Store.container.define<ApiMethod[]>(Target.constructor.prototype, apiMethodsMetadata, MetadataKeys.__api_method__, propertyKey)\r\n    }\r\n}\r\n\r\n/**\r\n * `get` http method.\r\n *\r\n * @example [@Get('/') public health() {}]\r\n */\r\nexport function Get(url?: PathParams): MethodDecorator\r\nexport function Get(status?: number): MethodDecorator\r\nexport function Get(url?: PathParams, status?: number): MethodDecorator\r\nexport function Get(arg1?: unknown, arg2?: unknown): unknown {\r\n    const url = typeof arg1 === 'string' ? arg1 : '/'\r\n    const status = typeof arg1 === 'number' ? arg1 : undefined || typeof arg2 === 'number' ? arg2 : undefined\r\n\r\n    return METHOD_DECORATOR_FACTORY(HttpMethods.Get, url, status as number)\r\n}\r\n\r\n/**\r\n * `post` http method.\r\n *\r\n * @example [@Post('/') public health() {}]\r\n */\r\nexport function Post(url?: PathParams): MethodDecorator\r\nexport function Post(status?: number): MethodDecorator\r\nexport function Post(url?: PathParams, status?: number): MethodDecorator\r\nexport function Post(arg1?: unknown, arg2?: unknown): unknown {\r\n    const url = typeof arg1 === 'string' ? arg1 : '/'\r\n    const status = typeof arg1 === 'number' ? arg1 : undefined || typeof arg2 === 'number' ? arg2 : undefined\r\n\r\n    return METHOD_DECORATOR_FACTORY(HttpMethods.Post, url, status as number)\r\n}\r\n\r\n/**\r\n * `put` http method.\r\n *\r\n * @example [@Put('/') public health() {}]\r\n */\r\nexport function Put(url?: PathParams): MethodDecorator\r\nexport function Put(status?: number): MethodDecorator\r\nexport function Put(url?: PathParams, status?: number): MethodDecorator\r\nexport function Put(arg1?: unknown, arg2?: unknown): unknown {\r\n    const url = typeof arg1 === 'string' ? arg1 : '/'\r\n    const status = typeof arg1 === 'number' ? arg1 : undefined || typeof arg2 === 'number' ? arg2 : undefined\r\n\r\n    return METHOD_DECORATOR_FACTORY(HttpMethods.Put, url, status as number)\r\n}\r\n\r\n/**\r\n * `patch` http method.\r\n *\r\n * @example [@Patch('/') public health() {}]\r\n */\r\nexport function Patch(url?: PathParams): MethodDecorator\r\nexport function Patch(status?: number): MethodDecorator\r\nexport function Patch(url?: PathParams, status?: number): MethodDecorator\r\nexport function Patch(arg1?: unknown, arg2?: unknown): unknown {\r\n    const url = typeof arg1 === 'string' ? arg1 : '/'\r\n    const status = typeof arg1 === 'number' ? arg1 : undefined || typeof arg2 === 'number' ? arg2 : undefined\r\n\r\n    return METHOD_DECORATOR_FACTORY(HttpMethods.Patch, url, status as number)\r\n}\r\n\r\n/**\r\n * `delete` http method.\r\n *\r\n * @example [@Delete('/') public health() {}]\r\n */\r\nexport function Delete(url?: PathParams): MethodDecorator\r\nexport function Delete(status?: number): MethodDecorator\r\nexport function Delete(url?: PathParams, status?: number): MethodDecorator\r\nexport function Delete(arg1?: unknown, arg2?: unknown): unknown {\r\n    const url = typeof arg1 === 'string' ? arg1 : '/'\r\n    const status = typeof arg1 === 'number' ? arg1 : undefined || typeof arg2 === 'number' ? arg2 : undefined\r\n\r\n    return METHOD_DECORATOR_FACTORY(HttpMethods.Delete, url, status as number)\r\n}\r\n"]}