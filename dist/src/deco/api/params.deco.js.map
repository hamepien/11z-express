{"version":3,"file":"params.deco.js","sourceRoot":"","sources":["../../../../src/deco/api/params.deco.ts"],"names":[],"mappings":";;;AAAA,qDAA8C;AAC9C,6CAAmF;AAEnF;;;;;GAKG;AACH,SAAS,wBAAwB,CAAC,IAAsB;IACpD,OAAO,CAAC,IAAa,EAAsB,EAAE;QACzC,OAAO,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,EAAE;YAClC,8DAA8D;YAC9D,MAAM,cAAc,GAAsB,gBAAK,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,oBAAY,CAAC,qBAAqB,EAAE,WAAW,CAAC;gBACxI,CAAC,CAAC,8CAA8C;oBAC9C,gBAAK,CAAC,SAAS,CAAC,MAAM,CAAoB,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,oBAAY,CAAC,qBAAqB,EAAE,WAAW,CAAC;gBAC1H,CAAC,CAAC,iDAAiD;oBACjD,EAAE,CAAA;YAER,oDAAoD;YACpD,6BAA6B;YAC7B,sDAAsD;YACtD,cAAc,CAAC,IAAI,CAAC;gBAChB,IAAI;gBACJ,IAAI;gBACJ,KAAK;gBACL,WAAW;aACd,CAAC,CAAA;YAEF,qEAAqE;YACrE,gBAAK,CAAC,SAAS,CAAC,MAAM,CAAoB,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,cAAc,EAAE,oBAAY,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAA;QAC5I,CAAC,CAAA;IACL,CAAC,CAAA;AACL,CAAC;AAED;;;;GAIG;AACU,QAAA,GAAG,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,OAAO,CAAC,CAAA;AAErE;;;;GAIG;AACU,QAAA,GAAG,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,QAAQ,CAAC,CAAA;AAEtE;;;;GAIG;AACU,QAAA,IAAI,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,IAAI,CAAC,CAAA;AAEnE;;;;GAIG;AACU,QAAA,MAAM,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,MAAM,CAAC,CAAA;AAEvE;;;;GAIG;AACU,QAAA,KAAK,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,KAAK,CAAC,CAAA;AAErE;;;;GAIG;AACU,QAAA,IAAI,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,IAAI,CAAC,CAAA;AAEnE;;;;GAIG;AACU,QAAA,OAAO,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,OAAO,CAAC,CAAA;AAEzE;;;;GAIG;AACU,QAAA,OAAO,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,OAAO,CAAC,CAAA;AAEzE;;;;GAIG;AACU,QAAA,GAAG,GAAG,wBAAwB,CAAC,wBAAgB,CAAC,OAAO,CAAC,CAAA","sourcesContent":["import { Store } from '../../service/store.se'\r\nimport { MetadataKeys, ParameterIndices, ApiMethodParams } from '../../utils/types'\r\n\r\n/**\r\n * A named URL segments that are used to capture the values specified at their position in the URL factory.\r\n *\r\n * @param type parameter index.\r\n * @returns\r\n */\r\nfunction PARAMS_DECORATOR_FACTORY(type: ParameterIndices): Function {\r\n    return (name?: string): ParameterDecorator => {\r\n        return (Target, propertyKey, index) => {\r\n            // Here we check does api method param metadata exist or not?.\r\n            const paramsMetadata: ApiMethodParams[] = Store.container.has(Target.constructor.prototype, MetadataKeys.__api_method_params__, propertyKey)\r\n                ? // If it does exist we will get it from there.\r\n                  Store.container.getOwn<ApiMethodParams[]>(Target.constructor.prototype, MetadataKeys.__api_method_params__, propertyKey)\r\n                : // If it does not exist set it to an empty array.\r\n                  []\r\n\r\n            // Push each object property into the head variable.\r\n            // Why do we need to do this?\r\n            // Because sometime a class does contain many methods.\r\n            paramsMetadata.push({\r\n                type,\r\n                name,\r\n                index,\r\n                propertyKey\r\n            })\r\n\r\n            // Define a new metadata object and set it up in the container Store.\r\n            Store.container.define<ApiMethodParams[]>(Target.constructor.prototype, paramsMetadata, MetadataKeys.__api_method_params__, propertyKey)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Express's `request`.\r\n *\r\n * @example [health(@Req() req: Request)]\r\n */\r\nexport const Req = PARAMS_DECORATOR_FACTORY(ParameterIndices.REQUEST)\r\n\r\n/**\r\n * Express's `response`.\r\n *\r\n * @example [health(@Res() res: Response)]\r\n */\r\nexport const Res = PARAMS_DECORATOR_FACTORY(ParameterIndices.RESPONSE)\r\n\r\n/**\r\n * Express's `next function`.\r\n *\r\n * @example [health(@Next() next: NextFunction)]\r\n */\r\nexport const Next = PARAMS_DECORATOR_FACTORY(ParameterIndices.NEXT)\r\n\r\n/**\r\n * Express's `request params`.\r\n *\r\n * @example [health(@Params() params: object)]\r\n */\r\nexport const Params = PARAMS_DECORATOR_FACTORY(ParameterIndices.PARAMS)\r\n\r\n/**\r\n * Express's `request query`.\r\n *\r\n * @example [health(@Query() query: object)]\r\n */\r\nexport const Query = PARAMS_DECORATOR_FACTORY(ParameterIndices.QUERY)\r\n\r\n/**\r\n * Express's `request body`.\r\n *\r\n * @example [health(@Body() body: object)]\r\n */\r\nexport const Body = PARAMS_DECORATOR_FACTORY(ParameterIndices.BODY)\r\n\r\n/**\r\n * Express's `request cookies`.\r\n *\r\n * @example [health(@Cookies() cookies: object)]\r\n */\r\nexport const Cookies = PARAMS_DECORATOR_FACTORY(ParameterIndices.COOKIES)\r\n\r\n/**\r\n * Express's `request headers`.\r\n *\r\n * @example [health(@Headers() headers: object)]\r\n */\r\nexport const Headers = PARAMS_DECORATOR_FACTORY(ParameterIndices.HEADERS)\r\n\r\n/**\r\n * Express's `request`.\r\n *\r\n * @example [health(@Ctx('user') user: object)]\r\n */\r\nexport const Ctx = PARAMS_DECORATOR_FACTORY(ParameterIndices.CONTEXT)\r\n"]}