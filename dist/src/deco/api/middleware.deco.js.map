{"version":3,"file":"middleware.deco.js","sourceRoot":"","sources":["../../../../src/deco/api/middleware.deco.ts"],"names":[],"mappings":";;;AAAA,qDAA8C;AAC9C,6CAA4D;AAE5D;;;;;;GAMG;AACH,SAAS,4BAA4B,CAAC,IAAkB,EAAE,GAAiB;IACvE,OAAO,CAAC,MAAyB,EAAE,WAA4B,EAAE,EAAE;QAC/D,iCAAiC;QACjC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC5B,mEAAmE;YACnE,MAAM,eAAe,GAAiB,gBAAK,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,GAAG,EAAE,WAAW,CAAC;gBACrG,CAAC,CAAC,8CAA8C;oBAC9C,gBAAK,CAAC,SAAS,CAAC,MAAM,CAAe,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,GAAG,EAAE,WAAW,CAAC;gBACtF,CAAC,CAAC,iDAAiD;oBACjD,EAAE,CAAA;YAER,qEAAqE;YACrE,gBAAK,CAAC,SAAS,CAAC,MAAM,CAAe,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC,CAAA;SACrH;QAED,kCAAkC;QAClC,kBAAkB;QAClB,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAC9B,8DAA8D;YAC9D,MAAM,iBAAiB,GAAiB,gBAAK,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,oBAAY,CAAC,oBAAoB,CAAC;gBAClG,CAAC,CAAC,8CAA8C;oBAC9C,gBAAK,CAAC,SAAS,CAAC,MAAM,CAAe,MAAM,EAAE,oBAAY,CAAC,oBAAoB,CAAC;gBACjF,CAAC,CAAC,iDAAiD;oBACjD,EAAE,CAAA;YAER,qEAAqE;YACrE,gBAAK,CAAC,SAAS,CAAC,MAAM,CAAe,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,oBAAY,CAAC,oBAAoB,CAAC,CAAA;SAClH;IACL,CAAC,CAAA;AACL,CAAC;AAED;;;;;GAKG;AACH,SAAgB,UAAU,CAAC,IAAkB;IACzC,OAAO,4BAA4B,CAAC,IAAI,EAAE,oBAAY,CAAC,yBAAyB,CAAC,CAAA;AACrF,CAAC;AAFD,gCAEC","sourcesContent":["import { Store } from '../../service/store.se'\r\nimport { MetadataKeys, Middleware } from '../../utils/types'\r\n\r\n/**\r\n * A function which is called before the route handler factory.\r\n *\r\n * @param mids execute any code.\r\n * @param key metadata key.\r\n * @returns\r\n */\r\nfunction MIDDLEWARE_DECORATOR_FACTORY(mids: Middleware[], key: MetadataKeys): Function {\r\n    return (Target: Function | Object, propertyKey: string | symbol) => {\r\n        // If typeof Target is an object.\r\n        if (typeof Target === 'object') {\r\n            // Here we check does api method middleware metadata exist or not?.\r\n            const apiMidsMetadata: Middleware[] = Store.container.has(Target.constructor.prototype, key, propertyKey)\r\n                ? // If it does exist we will get it from there.\r\n                  Store.container.getOwn<Middleware[]>(Target.constructor.prototype, key, propertyKey)\r\n                : // If it does not exist set it to an empty array.\r\n                  []\r\n\r\n            // Define a new metadata object and set it up in the container Store.\r\n            Store.container.define<Middleware[]>(Target.constructor.prototype, mids.concat(apiMidsMetadata), key, propertyKey)\r\n        }\r\n\r\n        // If typeof Target is a function.\r\n        // NOTE: isolated.\r\n        if (typeof Target === 'function') {\r\n            // Here we check does route middleware metadata exist or not?.\r\n            const routeMidsMetadata: Middleware[] = Store.container.has(Target, MetadataKeys.__route_middleware__)\r\n                ? // If it does exist we will get it from there.\r\n                  Store.container.getOwn<Middleware[]>(Target, MetadataKeys.__route_middleware__)\r\n                : // If it does not exist set it to an empty array.\r\n                  []\r\n\r\n            // Define a new metadata object and set it up in the container Store.\r\n            Store.container.define<Middleware[]>(Target, mids.concat(routeMidsMetadata), MetadataKeys.__route_middleware__)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A function which is called before the route handler.\r\n *\r\n * @param mids execute any code.\r\n * @returns\r\n */\r\nexport function Middleware(mids: Middleware[]): Function {\r\n    return MIDDLEWARE_DECORATOR_FACTORY(mids, MetadataKeys.__api_method_middleware__)\r\n}\r\n"]}