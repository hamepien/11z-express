{"version":3,"file":"entry.js","sourceRoot":"","sources":["../../src/entry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector, defineInjector } from '@11z/core'\r\nimport { Store } from './service/store.se'\r\nimport { Constructable, MetadataKeys, Middleware, NonSafe, Route, Api, ApiMethod, ApiMethodParams, PathParams } from './utils/types'\r\nimport { Router as ExRouter, NextFunction, Request, Response, Express, RequestHandler } from 'express'\r\nimport { extractParams } from './lib/extract/params'\r\nimport { isPromise, isReadableStream, isServerResponse } from './utils/guards'\r\nimport { CustomError } from './lib/errors'\r\nimport { AnyZodObject, ZodError } from 'zod'\r\nimport { ThrowError } from './lib/throw.error'\r\n\r\nexport class Router {\r\n    /**\r\n     * @property `_app` express initialize.\r\n     */\r\n    private readonly _app: Express\r\n\r\n    /**\r\n     * @param initial express initial.\r\n     */\r\n    constructor({ initial }: { initial: Express }) {\r\n        this._app = initial\r\n    }\r\n\r\n    /**\r\n     * Attach and register application's decorated route.\r\n     *\r\n     * @param prefix prefix path.\r\n     * @param Handlers route handlers.\r\n     *\r\n     * Possible signatures:\r\n     * * `router.attach(prefix, [route, ...]) => void`\r\n     */\r\n    public attach<T = unknown>(prefix: PathParams, Handlers: T[]): void {\r\n        const Routes = this.removeDuplicatedArr(Handlers) as Constructable[]\r\n\r\n        Routes.forEach((Route) => {\r\n            const routeMetadata: Route<T> = Store.container.get(Route, MetadataKeys.__route__) // Parents.\r\n            const routeMidsMetadata: Middleware[] = Store.container.get(Route, MetadataKeys.__route_middleware__) // Parents.\r\n            const Apis = this.removeDuplicatedArr(routeMetadata.Apis) as Constructable[]\r\n\r\n            Apis.forEach((Api) => {\r\n                // Define injector.\r\n                defineInjector(Api)\r\n\r\n                // Router handler.\r\n                this.routerHandler(prefix, Api, routeMidsMetadata, routeMetadata.routeOptions.router, this.getInstance)\r\n            })\r\n        })\r\n\r\n        // Execute error handler.\r\n        this.errorHandlers()\r\n    }\r\n\r\n    /**\r\n     * No docs description yet.\r\n     *\r\n     * @param prefix prefix path.\r\n     * @param RouteApi route api handler.\r\n     * @param router express.Router()\r\n     * @param _getInstance get instance value.\r\n     */\r\n    private routerHandler(prefix: PathParams, Api: Constructable, routeMids: Middleware[], router: ExRouter, _getInstance: (api: Constructable) => Constructable): void {\r\n        const apiRouteInstance: Constructable = _getInstance(Api)\r\n        const apiRouteMethodNames: string[] = Object.getOwnPropertyNames(Object.getPrototypeOf(new Api())).filter((p) => p !== 'constructor')\r\n\r\n        // Metadata constance.\r\n        const apiMetadata: Api | undefined = Store.container.get(Api, MetadataKeys.__api__) // Parents.\r\n\r\n        // Throw.\r\n        if (!apiMetadata) throw ThrowError('ApiError', 'No api found. use `@Api()` instead.')\r\n\r\n        // Url path logic.\r\n        const preUrlPath: PathParams = this.removeTrailingSlash(prefix)\r\n        const apiUrlPath: PathParams = this.removeTrailingSlash(apiMetadata.url)\r\n\r\n        apiRouteMethodNames.forEach((name) => {\r\n            const apiMethodsMetadata: ApiMethod[] | undefined = Store.container.getOwn(Api.prototype, MetadataKeys.__api_method__, name) // A child of apiMetadata.\r\n\r\n            // Throw.\r\n            if (!apiMethodsMetadata) throw ThrowError('ApiMethodError', 'No api method found. use `@Get()` or any http methods instead.')\r\n\r\n            apiMethodsMetadata.forEach((method) => {\r\n                const apiMethodParamsMetadata: ApiMethodParams[] = Store.container.getOwn(Api.prototype, MetadataKeys.__api_method_params__, method.propertyKey) // A child of apiMetadata.\r\n                const apiMethodMidsMetadata: Middleware[] = Store.container.getOwn(Api.prototype, MetadataKeys.__api_method_middleware__, method.propertyKey) // A child of apiMetadata.\r\n                const apiMethodValidationMetadata: AnyZodObject = Store.container.getOwn(Api.prototype, MetadataKeys.__api_method_validation__, method.propertyKey) // A child of apiMetadata.\r\n\r\n                // Url path logic.\r\n                const methodUrlPath: PathParams = this.removeTrailingSlash(method.url)\r\n                const routeUrlPath = `${apiUrlPath}${methodUrlPath}`\r\n\r\n                // Original declared Fn.\r\n                const declaredFn = method.descriptor.value as Function\r\n\r\n                // Method logic.\r\n                method.descriptor.value = function (req: Request, res: Response, next: NextFunction): NonSafe {\r\n                    // Extract params as an arguments.\r\n                    const args: NonSafe[] = extractParams(req, res, next)(apiMethodParamsMetadata)\r\n\r\n                    // Apply custom arguments.\r\n                    const result: NonSafe = declaredFn.apply(apiRouteInstance, args)\r\n\r\n                    // Apply response status.\r\n                    res.status(method.status)\r\n\r\n                    /**\r\n                     * Custom response result.\r\n                     *\r\n                     * Possible signatures:\r\n                     * return a general string, boolean, number, promise, oject, array.\r\n                     * or a regular res.send()\r\n                     */\r\n                    if (isPromise(result)) {\r\n                        return result\r\n                            .then((value) => {\r\n                                !res.headersSent && res.send(value)\r\n                            })\r\n                            .catch((err) => {\r\n                                next(err)\r\n                            })\r\n                    } else if (isServerResponse(result)) {\r\n                        return !res.headersSent && res.send(result)\r\n                    } else if (result !== undefined) {\r\n                        return !res.headersSent && res.send(result)\r\n                    } else if (isReadableStream(result)) {\r\n                        return result.pipe(res)\r\n                    }\r\n\r\n                    // return result // Return the custom argument's result.\r\n                }\r\n\r\n                // Mids and validation constance.\r\n                const mMids = this.removeDuplicatedArr(apiMethodMidsMetadata) as Middleware[]\r\n                const rMids = this.removeDuplicatedArr(routeMids) as Middleware[]\r\n                const validation = apiMethodValidationMetadata ? this.validateResource(apiMethodValidationMetadata) : []\r\n\r\n                // Inject route fn into the router provider.\r\n                router[method.method](routeUrlPath, validation, ...rMids, ...mMids, method.descriptor.value)\r\n            })\r\n        })\r\n\r\n        // Register router.\r\n        this._app.use(preUrlPath, router)\r\n    }\r\n\r\n    /**\r\n     * No docs description yet.\r\n     */\r\n    private errorHandlers(): void {\r\n        // 404 handler.\r\n        this._app.use((_req, res) => {\r\n            res.status(404).send({\r\n                status: 404,\r\n                error: 'NOT_FOUND',\r\n                message: 'The route you were looking for does not exist or has been removed.'\r\n            })\r\n        })\r\n\r\n        // Global handler.\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        this._app.use((err: Error, _req: Request, res: Response, _next: NextFunction) => {\r\n            // Response logic.\r\n            if (err instanceof CustomError) {\r\n                res.status(err.status).send({\r\n                    status: err.status,\r\n                    error: err.error,\r\n                    message: err.message\r\n                })\r\n            } else {\r\n                // Log error on the backend side.\r\n                console.error(err.stack)\r\n\r\n                res.status(500).send({\r\n                    status: 500,\r\n                    error: 'INTERNAL_SERVER_ERROR',\r\n                    message: 'Something bad just happened!'\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * No docs description yet.\r\n     *\r\n     * @param schema any object schema.\r\n     * @returns\r\n     */\r\n    private validateResource(schema: AnyZodObject): RequestHandler {\r\n        return async (req: Request, res: Response, next: NextFunction) => {\r\n            try {\r\n                await schema.parseAsync({\r\n                    body: req.body,\r\n                    query: req.query,\r\n                    params: req.params\r\n                })\r\n\r\n                next()\r\n            } catch (err) {\r\n                if (err instanceof Error) {\r\n                    res.status(422).send({\r\n                        status: 422,\r\n                        error: 'UNPROCESSABLE_ENTITY',\r\n                        message: `${(err as ZodError)?.issues?.at(0)?.path.at(1)}: ${(err as ZodError)?.issues?.at(0)?.message}` || 'Validation error.'\r\n                    })\r\n                } else {\r\n                    res.status(422).send({\r\n                        status: 422,\r\n                        error: 'UNPROCESSABLE_ENTITY',\r\n                        message: 'Validation error.'\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * No docs description yet.\r\n     *\r\n     * @param Api\r\n     * @returns\r\n     */\r\n    private getInstance(Api: Constructable): Constructable {\r\n        try {\r\n            return Injector.get(Api) as Constructable\r\n        } catch (_) {\r\n            return new Api() as Constructable\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove trailing slash from a string.\r\n     * Example: Sometimes a url contain unused slashes `/api/v1/users////`\r\n     * This will be convert to this `/api/v1/users` to prevent route crashing.\r\n     *\r\n     * @param str\r\n     * @returns\r\n     */\r\n    private removeTrailingSlash(path: PathParams): PathParams {\r\n        if (typeof path === 'string') return path.replace(/\\/+$/, String())\r\n        return path\r\n    }\r\n\r\n    /**\r\n     * Remove duplicated array.\r\n     * Example: [1, 1, 2, 3] => [1, 2, 3]\r\n     *\r\n     * @returns\r\n     */\r\n    private removeDuplicatedArr(arr: unknown[]): unknown[] {\r\n        return Array.from(new Set(arr))\r\n    }\r\n}\r\n"]}