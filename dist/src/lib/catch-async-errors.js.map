{"version":3,"file":"catch-async-errors.js","sourceRoot":"","sources":["../../../src/lib/catch-async-errors.ts"],"names":[],"mappings":";;AAEA,MAAM,KAAK,GAAa,OAAO,CAAC,0BAA0B,CAAC,CAAA;AAC3D,MAAM,MAAM,GAAa,OAAO,CAAC,oBAAoB,CAAC,CAAA;AAEtD,MAAM,IAAI,GAAG,CAAC,MAAiB,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AACzD,MAAM,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAA;AAK/B;;;;;;GAMG;AACH,MAAM,WAAW,GAAG,CAAC,KAAY,EAAE,KAAoD,EAAW,EAAE;IAChG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QAC/B,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC,CAAC,CAAA;IAEF,OAAO,KAAK,CAAA;AAChB,CAAC,CAAA;AAED;;;;;;GAMG;AACH,MAAM,IAAI,GAAG,CAAC,KAAY,EAAW,EAAE;IACnC,MAAM,KAAK,GAAG,CAAC,GAAG,IAAe,EAAE,EAAE;QACjC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;QACtC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAA;QAE/D,IAAI,MAAM,IAAI,MAAM,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;QAE1E,OAAO,MAAM,CAAA;IACjB,CAAC,CAAA;IAED,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE;QACnC,KAAK,EAAE,KAAK,CAAC,MAAM;QACnB,QAAQ,EAAE,KAAK;KAClB,CAAC,CAAA;IAEF,OAAO,WAAW,CAAC,KAAK,EAAE,KAAgB,CAAC,CAAA;AAC/C,CAAC,CAAA;AAED;;;;GAIG;AACH,SAAS,gBAAgB;IACrB,MAAM,aAAa,GAAa,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAA;IAElE,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,GAAG,SAAS,KAAK,CAAC,IAAY,EAAE,EAAS;QACvE,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,CAAA;QACb,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAA;IAC7C,CAAC,CAAA;AACL,CAAC;AAED,sFAAsF;AACtF,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE;IAC7C,UAAU,EAAE,IAAI;IAChB,GAAG;QACC,OAAO,IAAI,CAAC,QAAQ,CAAA;IACxB,CAAC;IACD,GAAG,CAAC,EAAE;QACF,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,CAAA;QACb,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAA;IACtB,CAAC;CACJ,CAAC,CAAA;AAEF;4EAC4E;AAC5E,gBAAgB,EAAE,CAAA","sourcesContent":["import { NonSafe } from '../utils/types'\r\n\r\nconst Layer: Function = require('express/lib/router/layer')\r\nconst Router: Function = require('express/lib/router')\r\n\r\nconst last = (arr: NonSafe[] = []) => arr[arr.length - 1]\r\nconst noop = Function.prototype\r\n\r\ntype NewFn = { (...args: NonSafe[]): Function } & Function\r\ntype OldFn = { [x: string]: Function } & Function\r\n\r\n/**\r\n * It takes an old function and a new function, and copies all the properties from the old function to\r\n * the new function\r\n * @param {OldFn} oldFn - The function you want to copy the properties from.\r\n * @param newFn - NewFn & { [x: string]: Function | undefined }\r\n * @returns A function that takes an old function and a new function and returns a new function.\r\n */\r\nconst copyFnProps = (oldFn: OldFn, newFn: NewFn & { [x: string]: Function | undefined }): NonSafe => {\r\n    Object.keys(oldFn).forEach((key) => {\r\n        newFn[key] = oldFn[key]\r\n    })\r\n\r\n    return newFn\r\n}\r\n\r\n/**\r\n * It takes a function and returns a new function that calls the old function and if the old function\r\n * returns a promise, it catches any errors and passes them to the callback\r\n * @param {OldFn} oldFn - The function to wrap\r\n * @returns A function that takes in a variable number of arguments and returns a function that takes\r\n * in a variable number of arguments.\r\n */\r\nconst wrap = (oldFn: OldFn): NonSafe => {\r\n    const newFn = (...args: NonSafe[]) => {\r\n        const result = oldFn.apply(this, args)\r\n        const next = (args.length === 5 ? args[2] : last(args)) || noop\r\n\r\n        if (result && result.catch) return result.catch((err: Error) => next(err))\r\n\r\n        return result\r\n    }\r\n\r\n    Object.defineProperty(newFn, 'length', {\r\n        value: oldFn.length,\r\n        writable: false\r\n    })\r\n\r\n    return copyFnProps(oldFn, newFn as NonSafe)\r\n}\r\n\r\n/**\r\n * It patches the `param` function on the `Router` prototype to wrap the callback function in a\r\n * function that will catch any errors and pass them to the `next` function\r\n * @returns The original param function.\r\n */\r\nfunction patchRouterParam(): void {\r\n    const originalParam: Function = Router.prototype.constructor.param\r\n\r\n    Router.prototype.constructor.param = function param(name: string, fn: OldFn) {\r\n        fn = wrap(fn)\r\n        return originalParam.call(this, name, fn)\r\n    }\r\n}\r\n\r\n/* Creating a getter and setter for the `handle` property on the `Layer` prototype. */\r\nObject.defineProperty(Layer.prototype, 'handle', {\r\n    enumerable: true,\r\n    get() {\r\n        return this.__handle\r\n    },\r\n    set(fn) {\r\n        fn = wrap(fn)\r\n        this.__handle = fn\r\n    }\r\n})\r\n\r\n/* Patching the `param` function on the `Router` prototype to wrap the callback function in a\r\nfunction that will catch any errors and pass them to the `next` function. */\r\npatchRouterParam()\r\n"]}