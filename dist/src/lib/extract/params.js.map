{"version":3,"file":"params.js","sourceRoot":"","sources":["../../../../src/lib/extract/params.ts"],"names":[],"mappings":";;;AACA,6CAA8E;AAE9E;;;;;;;GAOG;AACH,SAAgB,aAAa,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IACzE,OAAO,CAAC,MAAyB,EAAa,EAAE;QAC5C,+BAA+B;QAC/B,6CAA6C;QAC7C,IAAI,CAAC,MAAM;YAAE,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;QAEpC,6BAA6B;QAC7B,MAAM,IAAI,GAAc,EAAE,CAAA;QAE1B,gBAAgB;QAChB,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;YACrC,QAAQ,IAAI,EAAE;gBACV,KAAK,wBAAgB,CAAC,OAAO;oBACzB,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;oBACjC,MAAK;gBACT,KAAK,wBAAgB,CAAC,QAAQ;oBAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;oBACjC,MAAK;gBACT,KAAK,wBAAgB,CAAC,IAAI;oBACtB,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;oBAClC,MAAK;gBACT,KAAK,wBAAgB,CAAC,MAAM;oBACxB,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;oBACxC,MAAK;gBACT,KAAK,wBAAgB,CAAC,KAAK;oBACvB,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;oBACvC,MAAK;gBACT,KAAK,wBAAgB,CAAC,IAAI;oBACtB,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;oBACtC,MAAK;gBACT,KAAK,wBAAgB,CAAC,OAAO;oBACzB,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;oBACzC,MAAK;gBACT,KAAK,wBAAgB,CAAC,OAAO;oBACzB,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;oBACzC,MAAK;gBACT,KAAK,wBAAgB,CAAC,OAAO;oBACzB,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;oBACjC,MAAK;aACZ;QACL,CAAC,CAAC,CAAA;QAEF,OAAO,IAAI,CAAA,CAAC,eAAe;IAC/B,CAAC,CAAA;AACL,CAAC;AA5CD,sCA4CC;AAED;;;;;;GAMG;AACH,SAAS,QAAQ,CAAC,SAAkB,EAAE,IAAa;IAC/C,OAAO,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA;AAC7C,CAAC","sourcesContent":["import { NextFunction, Request, Response } from 'express'\r\nimport { NonSafe, ParameterIndices, ApiMethodParams } from '../../utils/types'\r\n\r\n/**\r\n * No docs description yet.\r\n *\r\n * @param req express `request`.\r\n * @param res express `response`.\r\n * @param next express `next function`.\r\n * @returns\r\n */\r\nexport function extractParams(req: Request, res: Response, next: NextFunction): Function {\r\n    return (params: ApiMethodParams[]): NonSafe[] => {\r\n        // check if there is no params:\r\n        // return the regular params [req, res, next]\r\n        if (!params) return [req, res, next]\r\n\r\n        // declared empty args array.\r\n        const args: NonSafe[] = []\r\n\r\n        // params logic.\r\n        params.forEach(({ index, type, name }) => {\r\n            switch (type) {\r\n                case ParameterIndices.REQUEST:\r\n                    args[index] = getParam(req, name)\r\n                    break\r\n                case ParameterIndices.RESPONSE:\r\n                    args[index] = getParam(res, name)\r\n                    break\r\n                case ParameterIndices.NEXT:\r\n                    args[index] = getParam(next, name)\r\n                    break\r\n                case ParameterIndices.PARAMS:\r\n                    args[index] = getParam(req.params, name)\r\n                    break\r\n                case ParameterIndices.QUERY:\r\n                    args[index] = getParam(req.query, name)\r\n                    break\r\n                case ParameterIndices.BODY:\r\n                    args[index] = getParam(req.body, name)\r\n                    break\r\n                case ParameterIndices.COOKIES:\r\n                    args[index] = getParam(req.cookies, name)\r\n                    break\r\n                case ParameterIndices.HEADERS:\r\n                    args[index] = getParam(req.headers, name)\r\n                    break\r\n                case ParameterIndices.CONTEXT:\r\n                    args[index] = getParam(req, name)\r\n                    break\r\n            }\r\n        })\r\n\r\n        return args // return args.\r\n    }\r\n}\r\n\r\n/**\r\n * No docs yet.\r\n *\r\n * @param paramType parameter type.\r\n * @param name request name.\r\n * @returns\r\n */\r\nfunction getParam(paramType: NonSafe, name?: string): string {\r\n    return name ? paramType[name] : paramType\r\n}\r\n"]}